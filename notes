



OffertOffer=gson.fromJson(body,Offer.class);
tOffer.GenerateTags();
tOffer.add_date=System.currentTimeMillis()/1000L;
tOffer.change_date=System.currentTimeMillis()/1000L;

IndexResponseidxResponse=elasticClient.prepareIndex("rplus-index","offers").setSource(gson.toJson(tOffer)).execute().actionGet();

this.logger.info("idx_resp:"+idxResponse.status().name());

GetResponseresponse=elasticClient.prepareGet("rplus-index","offers",idxResponse.getId()).get();
Offeroffer=gson.fromJson(response.getSourceAsString(),Offer.class);
offer.id=response.getId();





        SearchRequestBuilder req = elasticClient.prepareSearch("rplus-index")
                .setTypes("offers")
                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)
                .setFrom(page * perPage).setSize(perPage);


        for (FilterObject fo: filters) {
            if (fo.exactVal != null) {
                req.setPostFilter(
                        QueryBuilders.termQuery(fo.fieldName, fo.exactVal));
            } else {
                if (fo.lowerVal != null) {
                    req.setPostFilter(
                            QueryBuilders.rangeQuery(fo.fieldName).gte(fo.lowerVal));
                }
                if (fo.upperVal != null) {
                    req.setPostFilter(
                            QueryBuilders.rangeQuery(fo.fieldName).lte(fo.upperVal));
                }
            }
        }

        if (filter != null) {
            if (filter.get("state") != null) {
                req.setPostFilter(
                    QueryBuilders.termQuery("state_code", filter.get("state"))
                );
            }
            if (filter.get("agent") != null) {
                //req.setPostFilter(
                //    QueryBuilders.termQuery("agent", filter.get("agent"));
                //)
            }
            if (filter.get("tag") != null) {
                //QueryBuilders.termQuery("tag", filter.get("tag"));
            }
            if (filter.get("depth") != null) {
                // calc date
                // filter.get("depth")
                //QueryBuilders.rangeQuery("last_seen_date").from(from_date);
            }
        }


        if (searchQuery.length() > 0) {

            BoolQueryBuilder q = QueryBuilders.boolQuery();

            q.must(QueryBuilders.matchPhraseQuery("allTags", searchQuery).slop(50));
            q.should(QueryBuilders.matchQuery("titleTags", searchQuery).boost(4));
            q.should(QueryBuilders.matchQuery("addressTags", searchQuery).boost(2));
            q.should(QueryBuilders.matchQuery("descriptionTags", searchQuery));

            req.setQuery(q);
        }

        SearchResponse response = req.execute().actionGet();

        for (SearchHit sh: response.getHits()) {
            Offer o = gson.fromJson(sh.getSourceAsString(), Offer.class);
            o.id = sh.getId();
            offerList.add(o);
        }




        SearchRequestBuilder req = elasticClient.prepareSearch(E_INDEX)
                .setTypes(E_TYPE)
                .setSearchType(SearchType.DEFAULT)
                .setFrom(page * perPage).setSize(perPage);

        if (personId.length() > 0) {
            req.setQuery(QueryBuilders.matchQuery("person_id", personId));
        }

        if (searchQuery.length() > 0) {
            req.setQuery(QueryBuilders.prefixQuery("_all", searchQuery));
        }

        SearchResponse response = req.execute().actionGet();

        for (SearchHit sh: response.getHits()) {
            Request request = gson.fromJson(sh.getSourceAsString(), Request.class);
            request.id = sh.getId();

            requestList.add(request);
        }



        	"id": 1,
        	"typeCode": "apartment",
        	"offerTypeCode": "sale",
        	"locality": "Хабаровск",
        	"address": "улица Такогото",
        	"roomsCount": 2,
        	"floor": 8,
        	"floorsCount": 9,
        	"squareTotal": 50,
        	"ownerPrice": 3150,
        	"sourceMedia": "avito",
        	"sourceUrl": "https://www.avito.ru/habarovsk/kvartiry/2-k_kvartira_50_m_89_et._863863271",
        	"addDate": 1478677834,
        	"changeDate": 1478677834,
        	"ownerPhones": [
        	    "8 914 219-56-75",
        	    "8 914 219-56-76"
            ]
#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin";

use Modern;
use Config;

use List::MoreUtils qw(uniq);
use DateTime;
use DateTime::Format::Strptime;
use File::Touch;
use JSON;
use Storable;
use MIME::Base64;
use Mojo::UserAgent;


use Data::Dumper;

no warnings 'experimental';


my $lock_file = 'lock';
my $history_file = 'history';

my $history = {};

my $pause = 10;
my $depth = 1;

my $config = get_config("irr_import.cfg");
my $site_config = $config->{import}->{irr};
my $main_url = $site_config->{main_url};

my $postfix = 'search/list=list/sort/date_sort:desc/';

my $sale_rooms_url = $main_url . $site_config->{sell_rooms} . $postfix;
my $sale_apartment_url = $main_url . $site_config->{sell_apartments} . $postfix;
my $sale_houses_url = $main_url . $site_config->{sell_houses} . $postfix;

my $sale_office_url = $main_url . '/real-estate/commercial-sale/offices/' . $postfix;
my $sale_gpurpose_url = $main_url . '/real-estate/commercial-sale/misc/' . $postfix;
my $sale_warehouse_url = $main_url . '/real-estate/commercial-sale/production-warehouses/' . $postfix;
my $sale_market_url = $main_url . '/real-estate/commercial-sale/retail/' . $postfix;
my $sale_service_url = $main_url . '/real-estate/commercial-sale/eating/' . $postfix;
my $sale_gpurpose_houses_url = $main_url . '/real-estate/commercial-sale/houses/' . $postfix;

my $sale_garage_url = $main_url . '/real-estate/garage/' . $postfix;


my $rent_rooms_url = $main_url . $site_config->{rent_rooms} . $postfix;
my $rent_apartments_url = $main_url . $site_config->{rent_apartments} . $postfix;
my $rent_houses_url = $main_url . $site_config->{rent_houses} . $postfix;

my $rent_office_url = $main_url . '/real-estate/commercial/offices/' . $postfix;
my $rent_gpurpose_url = $main_url . '/real-estate/commercial/misc/' . $postfix;
my $rent_warehouse_url = $main_url . '/real-estate/commercial/production-warehouses/' . $postfix;
my $rent_market_url = $main_url . '/real-estate/commercial/retail/' . $postfix;
my $rent_service_url = $main_url . '/real-estate/commercial/eating/' . $postfix;
my $rent_gpurpose_houses_url = $main_url . '/real-estate/commercial/houses/' . $postfix;

my $rent_garage_url = $main_url . '/real-estate/garage-rent/' . $postfix;

my $MEDIA_ID = 'irr';

my $ua = Mojo::UserAgent->new;
$ua->max_redirects(4);

my $parser = DateTime::Format::Strptime->new( pattern => '%Y-%m-%d %H:%M' );


say 'importing...';

#process_url_list([{url => 'http://khabarovsk.irr.ru/real-estate/rent/1-komn-kvartira-Dzerzhinskogo-ul-70-2-2-ploschad-advert525086104.html', eid => '', dt => parse_date('сегодня')}], 'apartment', 'rent');
#exit;

unless (_import_in_progress()) {
    _lock();
    load_history();
    import_irr ();
    save_history();
    _unlock();
}

sub _lock {
    touch($lock_file);
}

sub _unlock {
    unlink $lock_file;
}

sub _import_in_progress {
    if (-e $lock_file) {
        my $mtime = ( stat $lock_file )[9];
        my $current_time = time;

        my $diff = $current_time - $mtime;
        if ($diff < 6 * 60 * 60) {
            return 1;
        }
    }
    #return 1 if -e $lock_file;
    return 0;
}

sub load_history {
  if (-e $history_file) {
    $history = retrieve($history_file);
  }
}

sub save_history {
  store $history, $history_file;
}

sub import_irr {
    my @url_list;

    @url_list = get_url_list($sale_rooms_url, $depth);
    process_url_list(\@url_list, 'room', 'sale');

    @url_list = get_url_list($sale_apartment_url, $depth);
    process_url_list(\@url_list, 'apartment', 'sale');

    @url_list = get_url_list($sale_houses_url, $depth);
    process_url_list(\@url_list, 'house', 'sale');


    @url_list = get_url_list($sale_office_url, $depth);
    process_url_list(\@url_list, 'office_place', 'sale');

    @url_list = get_url_list($sale_gpurpose_url, $depth);
    process_url_list(\@url_list, 'gpurpose_place', 'sale');

    @url_list = get_url_list($sale_warehouse_url, $depth);
    process_url_list(\@url_list, 'warehouse_place', 'sale');

    @url_list = get_url_list($sale_market_url, $depth);
    process_url_list(\@url_list, 'market_place', 'sale');

    @url_list = get_url_list($sale_service_url, $depth);
    process_url_list(\@url_list, 'service_place', 'sale');

    @url_list = get_url_list($sale_gpurpose_houses_url, $depth);
    process_url_list(\@url_list, 'gpurpose_place', 'sale');


    @url_list = get_url_list($sale_garage_url, $depth);
    process_url_list(\@url_list, 'garage', 'sale');


    @url_list = get_url_list($rent_rooms_url, $depth);
    process_url_list(\@url_list, 'room', 'rent');

    @url_list = get_url_list($rent_apartments_url, $depth);
    process_url_list(\@url_list, 'apartment', 'rent');

    @url_list = get_url_list($rent_houses_url, $depth);
    process_url_list(\@url_list, 'house', 'rent');


    @url_list = get_url_list($rent_office_url, $depth);
    process_url_list(\@url_list, 'office_place', 'rent');

    @url_list = get_url_list($rent_gpurpose_url, $depth);
    process_url_list(\@url_list, 'gpurpose_place', 'rent');

    @url_list = get_url_list($rent_warehouse_url, $depth);
    process_url_list(\@url_list, 'warehouse_place', 'rent');

    @url_list = get_url_list($rent_market_url, $depth);
    process_url_list(\@url_list, 'market_place', 'rent');

    @url_list = get_url_list($rent_service_url, $depth);
    process_url_list(\@url_list, 'service_place', 'rent');

    @url_list = get_url_list($rent_gpurpose_houses_url, $depth);
    process_url_list(\@url_list, 'gpurpose_place', 'rent');


    @url_list = get_url_list($rent_garage_url, $depth);
    process_url_list(\@url_list, 'garage', 'rent');
}

sub get_url_list {
    my ($main_page, $page_count) = @_;
    my @url_list;

    my $quit = 0;

    sleep $pause;

    for(my $i = 1; $i <= $page_count; $i ++) {
        sleep 4;
        my $page_url = $i == 1 ? $main_page : $main_page . "page$i/";
        my $dom = get_res($page_url, [])->dom;

        $quit = 1;
        $dom->find('div[class~="productGrid"] a[class~="productBlock"]')->each( sub {
            my $date_str = $_->find('div[class~="productPostDate"]')->first->text;
            my $item_url = $_->attr('href');
            my $item_id = '0';

            if ($item_url =~ /advert(\d+).html/) {
                $item_id = $1;
            }

            if ($item_url !~ /khabarovsk/) {
              say 'skip';
              return;
            }

            my $dt = parse_date($date_str);
            my $eid = make_eid($item_id, $dt);

            if ($history->{$eid}) {
              say 'was processed already';
            } else {
              say $item_url;
              $quit = 0;
              push(@url_list, {url => $item_url, eid => $eid, dt => $dt});
            }
        });

        last if $quit;

        #$dom->find('a[class="add_title"]')->attr('href')->each( sub {
        #    my $notice_id = -1;
        #    if($_ =~ /advert(\d+).html/) {
        #        $notice_id = $1;
        #    }
        #    say $notice_id;
        #    unless (Import::Model::MediaImportHistory::Manager->get_objects_count(query => [media_id => $MEDIA->id, media_num => $notice_id])) {
        #        say $_;
        #        push @url_list, $_;
        #    }
        #});
    }

    return reverse @url_list;
}

sub process_url_list {
    my ($url_list_ref, $type_code, $offer_type) = @_;

    for my $item (@$url_list_ref) {
        my $item_url = $item->{url};
        my $eid = $item->{eid};
        my $dt = $item->{dt};
        sleep 4;
        say 'processing ' . $item_url;
        say $eid;

        my $data = {
            #source_media_id => $MEDIA_ID,
            #source_url => $item_url,
            #type_code => $type_code,
            #offer_type_code => $offer_type,
            #add_date => $dt->datetime() . '+03',  # fix it!

            state_code => undef,
            state_change_date => undef,

            stage => undef,
            stage_change_date => undef,

            type_code => $type_code,
            offer_type_code => $offer_type,

            address => undef,
            #house_num ap_num
            #public String house_type;

            ap_scheme => undef,
            rooms_count => undef,
            rooms_offer_count => undef,
            room_scheme => undef,

            floor => undef,
            floors_count => undef,
            levels_count => undef,
            condition => undef,
            balcony => undef,
            bathroom => undef,

            square_total => undef,
            square_living => undef,
            square_kitchen => undef,
            square_land => undef,

            description => undef,
            source_media => $MEDIA_ID,
            source_url => $item_url,
            source_media_text => undef,

            creator_id => undef,

            add_date => time(),
            change_date => undef,
            delete_date => undef,
            last_seen_date => undef,
            price_change_date => undef,


            owner_price => undef,
            agency_price => undef,
            lease_deposite => undef,
            work_info => undef,

            #location => {
            #  lat => undef,
            #  lon => undef,
            #},
            #public GeoLocation location;
            #latitude
            #longitude

            landmark => undef,

            owner_id => undef,
            agent_id => undef,
            assign_date => undef,


            multylisting => undef,
            mls_price_type => undef,
            mls_price => undef,

        };

        sleep 2;

        my $res = get_res($item_url, []);

        my $dom;

        if ($res) {
            $dom = $res->dom;
            #eval {

                parse_adv($dom, $data);

                #if (my $user_a = $dom->find('tr[class="seller"] a')->first) {
                #    my $user_ref = $user_a->{href};
                #    say $user_ref;
                #    unless ($user_ref =~ /^\/user/) {
                #        my $seller = $user_a->span->text;
                #        say 'seller: ' . $seller;
                #        foreach (@{$data->{'owner_phones'}}) {
                #            say 'add mediator ' . $_;
                #            #add_mediator($seller, $_);
                #        }
                #    }
                #}
            #} or do {
            #    say 'EXCEPTION!!!';
            #    say $@;
            #}
        }

        say Dumper $data;
        next unless $data->{owner_phones} ;
        next if @{$data->{owner_phones}} < 1;

        #http://localhost:4567/service/v1/offer/put
        my $r_json = $ua->post('http://localhost:4567/service/v1/offer/put' => json => $data)->res->json;
        my $o_id = $r_json->{id};
        say $o_id;
        $history->{$eid} = '1';

        if ($dom) {
            # вытащим фото
            $dom->find('a[class~="productPage__galleryImage"]')->each ( sub {
                my $img_url = $_->attr('href');
                say 'putting img ' . $img_url;
                my $photo_data = {
                  url => $img_url,
                };
                $ua->post('http://localhost:4567/service/v1/photo/put/' . $o_id => json => $photo_data);

                #Import::Util::Image::load_image($id, $image, $config->{storage}->{path}, $site_config->{crop_image_y});
            });
        }

    }
}

sub parse_adv {
    my ($dom, $data) = @_;

    my @owner_phones = ();
    if ($dom->find('div[class~="js-productPagePhoneLabel"]')->first) {
        my $phone_num_raw = decode_base64($dom->find('div[class~="js-productPagePhoneLabel"]')->first->attr('data-phone'));

        say $phone_num_raw;
        push @owner_phones, $phone_num_raw;
        #if (my $phone_num = Import::Util::PhoneNum->parse($phone_num_raw, $config->{default_phone_prefix})) {
            #push @owner_phones, $phone_num;
        #}
    } else {
        say 'no phone?'
    }

    $data->{'owner_phones'} = \@owner_phones;

    my $n = $dom->find('div[class~="productPage__price"]')->first;
    if ($n) {
        my $cost = $n->all_text;
        if ($cost) {
            $cost =~ s/\D//g;
            $data->{'owner_price'} = $cost / 1000;
        }
    }

    my $text;
    $n = $dom->find('p[class~="js-productPageDescription"]')->first;
    if ($n) {
        $text = $n->all_text;
        $data->{'source_media_text'} = $text;
    }

    my $addr;
    $n = $dom->find('div[class~="productPage__infoItem"] ')->[2];
    if ($n) {
        $addr = $n->all_text;
    }
    $data->{'address'} = $addr;

    $dom->find('li[class~="productPage__infoColumnBlockText"]')->each(sub {

        my $tfield = lc $_->text;
        my $tkey = '';
        my $tval = '';

        if ($tfield =~ /(.+?): (.+)/) {
          $tkey = $1;
          $tval = $2;
        } else {
          $tkey = $tfield;
          $tval = $tfield;
        }

        my $tnum = $tval;

        if($tnum =~ /(\d+(?:,\d+)?)/) {
            $tnum = $1;
        } else {
            $tnum =~ s/\D//g;
        }

        say '---';
        say 'key: ' . $tkey;
        say 'kval: ' . $tval;

        given ($tkey) {

            when ("этаж") {
                $data->{'floor'} = $tnum;
            }

            when ("количество этажей") {
                $data->{'floors_count'} = $tnum;
            }

            when ("этажей в здании") {
                $data->{'floors_count'} = $tnum;
            }

            when ("количество комнат") {
                $data->{'rooms_count'} = $tnum;
            }

            when ("комнат в квартире") {
                $data->{'rooms_count'} = $tnum;
            }

            when ("общая площадь") {
                $data->{'square_total'} = $tnum;
            }

            when ("жилая площадь") {
                $data->{'square_living'} = $tnum;
            }

            when ("площадь кухни") {
                $data->{'square_kitchen'} = $tnum;
            }

            when ("материал стен") {
                $data->{'house_type'} = $tval;
            }

            when ("ремонт") {

            }

            when ("балкон/лоджия") {

            }

            when ("санузел") {

            }

            when ("площадь строения") {
                $data->{'square_total'} = $tnum;
            }

            when ("площадь участка") {
                $data->{'square_land'} = $tnum;
                $data->{'square_land_type'} = 'ar';
            }

            when ("строение") {
                if ($tval =~ /коттедж/i) {
                    $data->{'type_code'} = 'cottage';
                } else {

                }
            }

            when ("комнат в квартире/общежитии") {
                $data->{'rooms_count'} = $tnum;
            }

            when ("количество комнат на продажу") {
                $data->{'rooms_offer_count'} = $tnum;
            }

            when ("комнат сдается") {
                $data->{'rooms_offer_count'} = $tnum;
            }

            when ("площадь арендуемой комнаты") {
                $data->{'square_total'} = $tnum;
            }

            when ("площадь продажи") {
                $data->{'square_total'} = $tnum;
            }

            when ("период аренды") {
                if ($tval =~ /краткосрочная/i) {
                    $data->{'offer_type'} = 'rent_short';
                }
            }
        }
    });

    # доп проверки
    if ($data->{'floor'} && $data->{'floors_count'}) {
        if ($data->{'floor'} * 1 > $data->{'floors_count'} * 1) {
            $data->{'floor'} = $data->{'floors_count'};
        }
    }
}

sub get_res {
    my ($url, $headers) = @_;

    say $url;

    my $res;
    my $code = 0;
    my $retry = 15;

    #push @headers, 'Referer' => $referer if $referer;
    #push @headers, 'Accept' => $accept if $accept;
    while ($code != 200 && $retry > 0) {
        $retry -= 1;
        if ($retry < 5) {
            say 'retry left ' . $retry;
        }
        if ($retry != 15) {
            sleep 3;
        }
        $res = $ua->get($url, {
            'Host' => 'khabarovsk.irr.ru',
            'Connection' => 'keep-alive',
            'Cache-Control' => 'max-age=0',
            'User-Agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36',
            'Accept-Encoding' => 'gzip,deflate,sdch',
            'Accept-Language' => 'ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4',
            @$headers,
        })->res;

        $code = $res->code unless $res->error;
    }

    if ($retry == 0) {
        undef $res;
    }

    return $res;
}

sub make_eid {
    my ($id, $date) = @_;

    return $id . '_' . $date->strftime('%Y%m%d')
}

sub parse_date {
    my $date = lc(shift);

    say $date;

    my $res;
    my $dt_now = DateTime->now(time_zone => "+1000");
    my $year = $dt_now->year();
    my $mon = $dt_now->month();
    my $mday = $dt_now->mday();

    if ($date =~ /сегодня, (\d{1,2}):(\d{1,2})/) {
        $res = $parser->parse_datetime("$year-$mon-$mday $1:$2");
        if ($res > $dt_now) {
            # substr 1 day
            $res->subtract(days => 1);
        }
    } elsif ($date =~ /(\d+) (\w+)/) {
        my $a_mon = month_num($2);
        say $a_mon;
        $res = $parser->parse_datetime("$year-$a_mon-$1 12:00");
    } else {
        $res = $dt_now;
    }

    say $res;

    return $res;
}

sub get_config {
  my $conf_name = shift;
  say $conf_name;
  my $json_text = do {
     open(my $json_fh, "<:encoding(UTF-8)", $conf_name)
        or die("Can't open $conf_name: $!\n");
     local $/;
     <$json_fh>
  };

  my $json = JSON->new;
  my $data = $json->decode($json_text);

  return $data;
}

sub month_num {
    my $month_str = lc(shift);

    given ($month_str) {
        when (/янв/) {
            return 1;
        }
        when (/фев/) {
            return 2;
        }
        when (/мар/) {
            return 3;
        }
        when (/апр/) {
            return 4;
        }
        when (/мая/) {
            return 5;
        }
        when (/июн/) {
            return 6;
        }
        when (/июл/) {
            return 7;
        }
        when (/авг/) {
            return 8;
        }
        when (/сен/) {
            return 9;
        }
        when (/окт/) {
            return 10;
        }
        when (/ноя/) {
            return 11;
        }
        when (/дек/) {
            return 12;
        }
    }
    return 0;
}
